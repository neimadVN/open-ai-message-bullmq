// queue.js
import { Queue } from "bullmq";
import { createClient } from "redis";

export const redisConnection = createClient({ url: "redis://localhost:6379" });
await redisConnection.connect();

// T·∫°o queue v·ªõi BullMQ, s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh prefix "bull"
export const messageQueue = new Queue("messageQueue", {
  connection: redisConnection,
});

/**
 * Th√™m message v√†o thread.
 * M·ªói job ch·ª©a 1 message v√† ƒë∆∞·ª£c ƒë·∫∑t jobId theo ƒë·ªãnh d·∫°ng: thread_<threadId>_<timestamp>
 * ƒê·ªìng th·ªùi l∆∞u jobId v√†o m·ªôt Set trong Redis ƒë·ªÉ tra c·ª©u hi·ªáu qu·∫£ h∆°n
 */
export async function addMessageToThread(threadId, message) {
  const timestamp = Date.now();
  const jobId = `thread_${threadId}_${timestamp}`;
  
  // Th√™m job v√†o queue
  await messageQueue.add(jobId, { threadId, message, timestamp }, {
    delay: 10000, // Delay 10 gi√¢y ƒë·ªÉ gom nh√≥m message
    attempts: 3,
    backoff: { type: "exponential", delay: 5000 },
    removeOnComplete: true,
  });
  
  // L∆∞u jobId v√†o Set c·ªßa thread ƒë·ªÉ truy v·∫•n nhanh
  await redisConnection.sAdd(`bull:threadJobs:${threadId}`, jobId);
  
  console.log(`üìù Added message to thread ${threadId}: ${message}`);
}

/**
 * L·∫•y t·∫•t c·∫£ c√°c job c√≥ jobId b·∫Øt ƒë·∫ßu v·ªõi "thread_<threadId>_"
 * S·ª≠ d·ª•ng Redis Set ƒë·ªÉ tra c·ª©u thay v√¨ d√πng l·ªánh KEYS
 */
export async function getJobsByThreadId(threadId) {
  // L·∫•y jobIds t·ª´ Set c·ªßa thread
  const jobIds = await redisConnection.sMembers(`bull:threadJobs:${threadId}`);
  
  // N·∫øu kh√¥ng c√≥ job n√†o, tr·∫£ v·ªÅ m·∫£ng r·ªóng
  if (!jobIds || jobIds.length === 0) {
    return [];
  }
  
  // L·∫•y jobs theo batch ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t
  const batchSize = 20;
  const jobs = [];
  
  for (let i = 0; i < jobIds.length; i += batchSize) {
    const batchIds = jobIds.slice(i, i + batchSize);
    const batchJobs = await Promise.all(
      batchIds.map(id => messageQueue.getJob(id))
    );
    jobs.push(...batchJobs.filter(Boolean));
  }
  
  return jobs;
}

/**
 * X√≥a jobId kh·ªèi Set c·ªßa thread sau khi job ƒë∆∞·ª£c x·ª≠ l√Ω
 */
export async function removeJobsFromThreadIndex(threadId, jobIds) {
  if (jobIds.length === 0) return;
  
  await redisConnection.sRem(`bull:threadJobs:${threadId}`, ...jobIds);
}

// worker.js
import { Worker, QueueScheduler } from "bullmq";
import { redisConnection, messageQueue, getJobsByThreadId, removeJobsFromThreadIndex } from "./queue.js";
import OpenAI from "openai";
import dotenv from "dotenv";

dotenv.config();
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// Kh·ªüi t·∫°o QueueScheduler ƒë·ªÉ ƒë·∫£m b·∫£o x·ª≠ l√Ω c√°c job b·ªã treo (stalled)
new QueueScheduler("messageQueue", { connection: redisConnection });

/**
 * H√†m ki·ªÉm tra tr·∫°ng th√°i run c·ªßa OpenAI v·ªõi exponential backoff
 */
async function waitForRunCompletion(threadId, runId) {
  let status = "in_progress";
  let delay = 1000; // B·∫Øt ƒë·∫ßu v·ªõi 1 gi√¢y
  const maxDelay = 15000; // T·ªëi ƒëa 15 gi√¢y
  const maxWaitTime = 300000; // T·ªëi ƒëa 5 ph√∫t
  const startTime = Date.now();
  
  while (["in_progress", "queued", "requires_action"].includes(status)) {
    // Ki·ªÉm tra th·ªùi gian t·ªëi ƒëa
    if (Date.now() - startTime > maxWaitTime) {
      throw new Error(`Run timeout exceeded for thread ${threadId}`);
    }
    
    await new Promise(resolve => setTimeout(resolve, delay));
    
    // Ki·ªÉm tra tr·∫°ng th√°i
    const checkRun = await openai.beta.threads.runs.retrieve(threadId, runId);
    status = checkRun.status;
    
    // Exponential backoff v·ªõi gi·ªõi h·∫°n t·ªëi ƒëa
    delay = Math.min(delay * 1.5, maxDelay);
  }
  
  if (status !== "completed") {
    throw new Error(`Run ended with status: ${status} for thread ${threadId}`);
  }
  
  return status;
}

/**
 * H√†m x·ª≠ l√Ω t·∫•t c·∫£ message c·ªßa m·ªôt thread.
 * jobs: danh s√°ch c√°c job c√≥ c√πng threadId (m·ªói job ch·ª©a 1 message).
 */
async function processMessages(threadId, jobs) {
  const lockKey = `lock_thread_${threadId}`;
  // D√πng Redis lock v·ªõi th·ªùi gian h·∫øt h·∫°n 5 ph√∫t
  const lock = await redisConnection.set(lockKey, "locked", {
    NX: true,
    EX: 300
  });
  
  if (!lock) {
    console.log(`‚ö†Ô∏è Thread ${threadId} is already being processed.`);
    return;
  }
  
  try {
    // Gom nh√≥m c√°c message t·ª´ c√°c job v√† s·∫Øp x·∫øp theo timestamp
    jobs.sort((a, b) => a.data.timestamp - b.data.timestamp);
    const messages = jobs.map(job => job.data.message);
    const combinedMessage = messages.join("\n");
    
    console.log(`üöÄ Processing ${messages.length} messages for thread ${threadId}...`);
    
    // G·ª≠i message ƒë√£ gom v√†o OpenAI
    await openai.beta.threads.messages.create(threadId, {
      role: "user",
      content: combinedMessage,
    });
    
    // G·ªçi OpenAI ƒë·ªÉ th·ª±c hi·ªán run cho thread
    console.log("üîÑ Calling OpenAI API...");
    const run = await openai.beta.threads.runs.create(threadId, {
      assistant_id: "your-assistant-id",
      instructions: "Tr·∫£ l·ªùi t·∫•t c·∫£ c√°c tin nh·∫Øn m·ªôt c√°ch logic.",
    });
    
    await waitForRunCompletion(threadId, run.id);
    console.log(`‚úÖ OpenAI ƒë√£ tr·∫£ l·ªùi xong cho thread ${threadId}`);
    
    // L·∫•y t·∫•t c·∫£ jobIds ƒë·ªÉ x√≥a kh·ªèi index
    const jobIds = jobs.map(job => job.id);
    
    // X√≥a jobs kh·ªèi queue
    await Promise.all(jobs.map(job => job.remove()));
    
    // X√≥a jobIds kh·ªèi index
    await removeJobsFromThreadIndex(threadId, jobIds);
    
  } catch (error) {
    console.error(`‚ùå L·ªói khi x·ª≠ l√Ω thread ${threadId}:`, error);
    // Trong tr∆∞·ªùng h·ª£p l·ªói, ta c√≥ th·ªÉ quy·∫øt ƒë·ªãnh c√≥ n√™n th·ª≠ l·∫°i hay kh√¥ng
    // ·ªû ƒë√¢y, ta ƒë·ªÉ cho jobs th·ª≠ l·∫°i t·ª± ƒë·ªông theo c·∫•u h√¨nh retry
  } finally {
    await redisConnection.del(lockKey);
  }
}

/**
 * Worker c·ªßa BullMQ: Khi m·ªôt job ƒë∆∞·ª£c k√≠ch ho·∫°t, ki·ªÉm tra xem n√≥ c√≥ ph·∫£i job c≈© nh·∫•t ch∆∞a x·ª≠ l√Ω kh√¥ng
 * N·∫øu c√≥, l·∫•y t·∫•t c·∫£ job c√≥ c√πng threadId r·ªìi x·ª≠ l√Ω chung
 */
const worker = new Worker("messageQueue", async (job) => {
  const { threadId, timestamp } = job.data;
  const jobId = job.id;
  
  // L·∫•y c√°c job c√≥ c√πng threadId
  const relatedJobs = await getJobsByThreadId(threadId);
  if (relatedJobs.length === 0) return;
  
  // S·∫Øp x·∫øp jobs theo timestamp ƒë·ªÉ t√¨m job c≈© nh·∫•t
  relatedJobs.sort((a, b) => a.data.timestamp - b.data.timestamp);
  
  // Ch·ªâ x·ª≠ l√Ω n·∫øu job hi·ªán t·∫°i l√† job c≈© nh·∫•t (ho·∫∑c c√πng l√¥ v·ªõi job c≈© nh·∫•t)
  if (relatedJobs[0].id !== jobId) {
    console.log(`‚è≠Ô∏è B·ªè qua job ${jobId}, kh√¥ng ph·∫£i job c≈© nh·∫•t c·ªßa thread ${threadId}`);
    return;
  }
  
  await processMessages(threadId, relatedJobs);
}, {
  connection: redisConnection,
  lockDuration: 30000,
});

console.log("üë∑ Worker is running...");

// app.js
import { addMessageToThread } from "./queue.js";

async function main() {
  try {
    console.log("=== Test 1: Sequential messages in same thread ===");
    await testSequentialMessages();
    
    // Exit after tests complete
    setTimeout(() => {
      console.log("Tests completed, exiting process");
      process.exit(0);
    }, 60000);
  } catch (error) {
    console.error("Test failed with error:", error);
    process.exit(1);
  }
}

async function testSequentialMessages() {
  const startTime = Date.now();
  
  // Th√™m c√°c tin nh·∫Øn v√†o thread "thread-123"
  await addMessageToThread("thread-123", "Tin nh·∫Øn 1");
  await addMessageToThread("thread-123", "Tin nh·∫Øn 2");
  await addMessageToThread("thread-123", "Tin nh·∫Øn 3");
  console.log(`Batch 1 added in ${Date.now() - startTime}ms`);
  
  // Sau 11 gi√¢y (sau khi delay job 10 gi√¢y h·∫øt h·∫°n), worker s·∫Ω x·ª≠ l√Ω batch 1
  // Sau ƒë√≥, th√™m th√™m c√°c tin nh·∫Øn m·ªõi v√†o c√πng thread
  setTimeout(async () => {
    const batchTime = Date.now();
    await addMessageToThread("thread-123", "Tin nh·∫Øn 4");
    await addMessageToThread("thread-123", "Tin nh·∫Øn 5");
    console.log(`Batch 2 added in ${Date.now() - batchTime}ms`);
    
    // Th√™m th√™m tin nh·∫Øn sau 3 gi√¢y n·ªØa
    setTimeout(async () => {
      const finalTime = Date.now();
      await addMessageToThread("thread-123", "Tin nh·∫Øn 6");
      console.log(`Final message added in ${Date.now() - finalTime}ms`);
    }, 3000);
  }, 11000);
}

main();